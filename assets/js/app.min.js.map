{"version":3,"names":[],"mappings":"","sources":["app.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\n// -------------------------------------\n//   Dependencies\n// -------------------------------------\n/** \n  * @plugins\n  * require(\"fastclick\");\n**/\n\n// base\n/* empty block */\n\n// services\n/* empty block */\n\n// directives\n/* empty block */\n\n// components\n/* empty block */\n\n// controllers\n/* empty block */\n\n// config\nvar CONFIG = require(\"./config\");\nconsole.log(\"CONFIG options are:\");\nconsole.log(CONFIG);\n\n// -------------------------------------\n//   App\n// -------------------------------------\n/** \n  * @name app\n  * @desc The main js file that contains the \n          run options and functions for the app.\n**/\n\n(function() {\n  console.log(\"app.js loaded.\");\n\n  /** \n    * @name App\n    * @desc the main class for the app\n    * @return {Object} - the instance of the app class\n    **/\n    function App() {\n      // ---------------------------------------------\n      //   Private members\n      // ---------------------------------------------\n      var _hasFastClickAttached = false; // flag to indicate if fast click was attached\n\n      // ---------------------------------------------\n      //   Public members\n      // ---------------------------------------------\n      /* empty block */\n\n      // ---------------------------------------------\n      //   Private methods\n      // ---------------------------------------------\n      // @name _attachFastClick\n      // @desc function to attach fast click to the document\n      // @param {Event} event - the event the function was dispatched from\n      function _attachFastClick(event) { \n        try { FastClick.attach(document.body); } // try to attach fast click\n        catch(error) { console.log(error); } // catch attach fast click error\n      }\n\n      // ---------------------------------------------\n      //   Public methods\n      // ---------------------------------------------\n      // @name init\n      // @desc init function to initialize the app\n      function init() {\n        console.log(\"app.js message: init() called.\");\n\n        // instantiate FastClick on the body for eliminating\n        // the 300ms delay between a physical tap and the \n        // firing of a click event on mobile browsers\n        if (!_hasFastClickAttached && \"addEventListener\" in document) {\n          document.addEventListener(\"DOMContentLoaded\", _attachFastClick, false);\n          _hasFastClickAttached = true; // set attached flag as true\n        }\n      }\n\n      // @name destory\n      // @desc destory function to destroy the app\n      function destroy() { }\n\n      // ---------------------------------------------\n      //   Constructor block\n      // ---------------------------------------------\n      /* empty block */\n\n      // ---------------------------------------------\n      //   Instance block\n      // ---------------------------------------------\n      return {\n        init: init, // init function for the controller\n        destroy: destroy // destory function for the controller\n      };\n    }\n\n  // ---------------------------------------------\n  //   Run block\n  // ---------------------------------------------\n  var app = new App(); // create a new app\n  app.init(); // initiate the created app\n\n})();\n},{\"./config\":2}],2:[function(require,module,exports){\n\"use strict\";\n\n// -------------------------------------\n//   Dependencies\n// -------------------------------------\n/** \n  * @plugins\n**/\n\n// base\n/* empty block */\n\n// -------------------------------------\n//   Config\n// -------------------------------------\n/** \n  * @name config\n  * @desc The main js file that contains the \n          config options and functions for the app.\n**/\n(function() {\n  console.log(\"config.js loaded.\");\n\n  /** \n    * @name BuildDetect\n    * @desc Class to detect the current build.\n    * @param {String} host - the window location host\n    * @return {Object} - the instance of the build class\n  **/\n  function BuildDetect(host) {\n    // ---------------------------------------------\n    //   Private members\n    // ---------------------------------------------\n    /* empty block */\n\n    // ---------------------------------------------\n    //   Public members\n    // ---------------------------------------------\n    var bd = this; // to capture the content of this\n    bd.isProd = false; // flag turn dev mode on/off ( will be modified by gulp )\n    bd.isDeploy = true; // flag turn live mode on/off ( will be modified by gulp )\n\n    // ---------------------------------------------\n    //   Private methods\n    // ---------------------------------------------\n    /* empty block */\n\n    // ---------------------------------------------\n    //   Public methods\n    // ---------------------------------------------\n    // @name isMobile\n    // @desc to detect mobile build\n    // @return {Boolean} - true or false\n    function isMobile() { return host.indexOf(\":m.\") != -1; }\n\n    // @name isDesktop\n    // @desc to detect desktop build\n    // @return {Boolean} - true or false\n    function isDesktop() { return !isMobile(); }\n\n    // ---------------------------------------------\n    //   Constructor block\n    // ---------------------------------------------\n    // check if the given host is valid\n    if(host == null || typeof host == \"undefined\") {\n      host = window.location.host;\n    }\n\n    // ---------------------------------------------\n    //   Instance block\n    // ---------------------------------------------\n    bd.isMobile = isMobile(); // to detect mobile build\n    bd.isDesktop = isDesktop(); // to detect desktop build\n  }\n\n  /** \n    * @name BreakpointDetect\n    * @desc Class to detect the current breakpoint.\n    * @return {Object} - the instance of the breakpoint class\n  **/\n  function BreakpointDetect() {\n    // ---------------------------------------------\n    //   Private members\n    // ---------------------------------------------\n    /* empty block */\n\n    // ---------------------------------------------\n    //   Public members\n    // ---------------------------------------------\n    var br = this; // to capture the content of this\n    br.value = null; // the current breakpoint value\n\n    // flags to indicate various browser breakpoints\n    br.isDesktopLarge = false; br.isDesktop = false; // desktop\n    br.isTablet = false; br.isTabletSmall = false;   // tablet\n    br.isMobile = false; br.isMobileSmall = false;   // mobile\n\n    // ---------------------------------------------\n    //   Private methods\n    // ---------------------------------------------\n    // @name _isMobileSmall, _isMobilem _isTabletSmall, \n    // @name _isTablet, _isDesktop, _isDesktopLarge\n    // @desc to detect various browser breakpoints\n    // @return {Boolean} - true or false\n    function _isDesktopLarge() { return  br.value == \"desktop-lg-up\"; }\n    function _isDesktop()      { return  _isDesktopLarge() || br.value == \"desktop\"; }\n    \n    function _isTablet()       { return  _isTabletSmall() || br.value == \"tablet\"; }\n    function _isTabletSmall()  { return  br.value == \"tablet-sm\"; }\n\n    function _isMobile()       { return  _isMobileSmall() || br.value == \"mobile\"; }\n    function _isMobileSmall()  { return  br.value == \"mobile-sm\"; }\n\n    // @name _updateValues\n    // @desc function to update breakpoint value and flags\n    function _updateValues() {\n      // update the breakpoint value\n      br.value = window.getComputedStyle(document.querySelector('body'), ':before')\n                     .getPropertyValue('content').replace(/\\\"/g, '');\n\n      // update all the breakpoint flags\n      if(_isDesktopLarge()) { br.isDesktopLarge = true; } else { br.isDesktopLarge = false; }\n      if(_isDesktop()) { br.isDesktop = true; } else { br.isDesktop = false; }\n\n      if(_isTablet()) { br.isTablet = true; } else { br.isTablet = false; }\n      if(_isTabletSmall()) { br.isTabletSmall = true; } else { br.isTabletSmall = false; }\n\n      if(_isMobile()) { br.isMobile = true; } else { br.isMobile = false; }\n      if(_isMobileSmall()) { br.isMobileSmall = true; } else { br.isMobileSmall = false; }\n    }\n\n    // ---------------------------------------------\n    //   Public methods\n    // ---------------------------------------------\n    /* empty block */\n    \n    // ---------------------------------------------\n    //   Constructor block\n    // ---------------------------------------------\n    // add window resize event listener \n    // to update the breakpoint value and fals\n    window.addEventListener(\"resize\", function(event) {\n      _updateValues();\n    });\n\n    // update the breakpoint value and flags\n    // at least once after initialization\n    _updateValues();\n\n    // ---------------------------------------------\n    //   Instance block\n    // ---------------------------------------------\n    /* empty block */\n  }\n\n  /** \n    * @name CONFIG\n    * @desc Constant that contains the config options and values for the app\n    * @return {Object} - all the possible config options and values for the app\n  **/\n  function CONFIG() {\n    // ---------------------------------------------\n    //   Private members\n    // ---------------------------------------------\n    var _md = new MobileDetect(navigator.userAgent); // detect mobile\n    var _bd = new BuildDetect(window.location.host); // detect build\n    var _os = _md.os(); // detect mobile OS\n\n    var _src = \"/\";   // src path\n    var _dist = \"/\"; // dist path\n    var _deploy = \"/\";     // deploy path\n\n    // ---------------------------------------------\n    //   Public members\n    // ---------------------------------------------\n    var breakpoint = new BreakpointDetect(); // detect breakpoint\n\n    // ---------------------------------------------\n    //   Private methods\n    // ---------------------------------------------\n    /* empty block */\n\n    // ---------------------------------------------\n    //   Public methods\n    // ---------------------------------------------\n    // @name isPhone, isTablet, isMobile, isIOS, isAndroid\n    // @desc functions to detect mobile device and os\n    // @return {Boolean} - returns true or false\n    function isPhone()  { return _md.phone()  != null; } // only phones\n    function isTablet() { return _md.tablet() != null || _bd.isMobile; } // only tablets\n    function isMobile() { return _md.mobile() != null || _bd.isMobile; } // phones and tablets\n\n    function isIOS() { return _os ? (_os.toLowerCase().indexOf(\"ios\") != -1) : false; } // ios\n    function isAndroid() { return _os ? (_os.toLowerCase().indexOf(\"android\") != -1) : false; } // android\n\n    function isIOSOld() { return _os ? (isIOS() && parseFloat(_md.version(\"iOS\")) < 9) : false; } // ios old\n    function isAndroidOld() { return _os ? (isAndroid() && parseFloat(_md.version(\"Android\")) < 6) : false; } // android old\n\n    // @name isFirefox, isSafari, isChrome\n    // @desc function to detect firefox, safari and chrome\n    // @return {Boolean} - returns true or false base on the check\n    function isFirefox() { return !isNaN(_md.version(\"Firefox\")); }\n    function isSafari()  { return !isNaN(_md.version(\"Safari\"));  }\n    function isChrome()  { return !isNaN(_md.version(\"Chrome\"));  }\n\n    // @name getIEVersion\n    // @desc function to get internet explorer version\n    // @return {Boolean|Number} - returns version number or false\n    function getIEVersion() {\n      var ua = navigator.userAgent;\n\n      var msie = ua.indexOf(\"MSIE \");\n      if (msie > 0) {\n          // IE 10 or older - return version number\n          return parseInt(ua.substring(msie + 5, ua.indexOf(\".\", msie)), 10);\n      }\n\n      var trident = ua.indexOf(\"Trident/\");\n      if (trident > 0) {\n        // IE 11 - return version number\n        var rv = ua.indexOf(\"rv:\");\n        return parseInt(ua.substring(rv + 3, ua.indexOf(\".\", rv)), 10);\n      }\n\n      var edge = ua.indexOf(\"Edge/\");\n      if (edge > 0) {\n        // IE 12 - return version number\n        return parseInt(ua.substring(edge + 5, ua.indexOf(\".\", edge)), 10);\n      }\n\n      // other browsers\n      return false;\n    }\n\n    // @name isIE\n    // @desc function to detect internet explorer\n    // @return {Boolean} - returns true or false\n    function isIE() {\n      try { return parseInt(getIEVersion()) > 0; }\n      catch(error) { /*console.log(error);*/ return false; }\n    }\n\n    // @name isIEOld\n    // @desc function to detect old internet explorer\n    // @return {Boolean} - returns true or false\n    function isIEOld() {\n      try { return parseInt(getIEVersion()) <= 10; }\n      catch(error) { /*console.log(error);*/ return false; }\n    }\n\n    // @name isLocalHost\n    // @desc functions to check for the server host environment\n    // @return {Boolean} - returns true or false based on environment\n    function isLocalHost() { \n      return (window.location.host).indexOf(\":8000\") != -1 \n          || (window.location.host).indexOf(\":4000\") != -1; \n    }\n\n    // @name isAmazonHost\n    // @desc functions to check for the server host environment\n    // @return {Boolean} - returns true or false based on environment\n    function isAmazonHost() { \n      return (window.location.host).indexOf(\"amazonaws\") != -1; \n    }\n\n    // @name getViewsPath\n    // function to get the path for views\n    // @return {String} - returns the path\n    function getViewsPath() {\n      var viewsPath = \"static/views/\";\n      return !_bd.isProd ? _src + viewsPath : _dist + viewsPath;\n    }\n\n    // @name getTemplatesPath\n    // function to get the path for templates\n    // @return {String} - returns the path\n    function getTemplatesPath() {\n      var templatesPath = \"static/templates/\";\n      return !_bd.isProd ? _src + templatesPath : _dist + templatesPath;\n    }\n\n    // @name getDataPath\n    // function to get the path for data\n    // @return {String} - returns the path\n    function getDataPath() {\n      var dataPath = \"data/\";\n      return !_bd.isProd ? _src + dataPath : _dist + dataPath;\n    }\n\n    // @name getImagesPath\n    // function to get the path for images\n    // @return {String} - returns the path\n    function getImagesPath() {\n      var imagesPath = \"images/\";\n      return !_bd.isProd ? _src + imagesPath : _dist + imagesPath;\n    }\n\n    // @name getVideosPath\n    // function to get the path for videos\n    // @return {String} - returns the path\n    function getVideosPath() {\n      var videosPath = \"videos/\";\n      return !_bd.isProd ? _src + videosPath : _dist + videosPath;\n    }\n\n    // ---------------------------------------------\n    //   Constructor block\n    // ---------------------------------------------\n    // if app is in deployment mode\n    if(_bd.isDeploy) { \n        // all paths are the same\n        _src = _dist = _deploy;\n    }\n        \n    // ---------------------------------------------\n    //   Instance block\n    // ---------------------------------------------\n    return {\n      // device\n      device: {\n        isPhone: isPhone(), // functions to detect mobile device and os\n        isTablet: isTablet(), // functions to detect mobile device and os\n        isMobile: isMobile(), // functions to detect mobile device and os\n\n        isIOS: isIOS(), // functions to detect mobile device and os\n        isAndroid: isAndroid(), // functions to detect mobile device and os\n\n        isIOSOld: isIOSOld(), // functions to detect mobile device and os\n        isAndroidOld: isAndroidOld() // functions to detect mobile device and os\n      },\n\n      // browser\n      browser: {\n        isFirefox: isFirefox(),\n        isSafari: isSafari(),\n        isChrome: isChrome(),\n        isIE: isIE()\n      },\n\n      // breakpoint\n      breakpoint: breakpoint, // functions to detect the current breakpoint\n\n      // environment\n      environment: {\n        isProd: _bd.isProd,     // functions to check for the server host environment\n        isDeploy: _bd.isDeploy, // functions to check for the server host environment\n        \n        isLocalHost: isLocalHost(),   // functions to check for the server host environment\n        isAmazonHost: isAmazonHost(), // functions to check for the server host environment\n      },\n\n      // path\n      path: {\n        views: getViewsPath(),         // function to get the path for views\n        templates: getTemplatesPath(), // function to get the path for templates\n        \n        data: getDataPath(),     // function to get the path for data\n        images: getImagesPath(), // function to get the path for images\n        videos: getVideosPath()  // function to get the path for videos\n      },\n\n      // animation\n      animation: {\n        // duration and delay \n        // used in js animations\n        delay: 250,   // delay in ms\n        duration: 500 // duration in ms\n      },\n\n      // timeout\n      timeout: {\n        // timeouts used for \n        // manual scope and\n        // animation updates\n        scope: 275,    // timeout scope in ms\n        animation: 525 // timeout animation in ms\n      }\n    };\n  }\n\n  // ---------------------------------------------\n  //   Module export block\n  // ---------------------------------------------\n  module.exports = new CONFIG();\n\n})();\n},{}]},{},[1]);\n"],"file":"app.min.js"}